

---------------------  目录主要文件结构  -----------------

第一层：root层

a> 根文件夹 -> project  


第二层：项目层：Vue-Project 



第三层：配置层 
a> 配置文件(dir)      build/config 
b> 源代码文件(dir)    src
c> 静态文件(dir)      static
d> index.html         入口页面


第四层(src dir)：源代码层 
a> api(dir)                数据接口(dir)
b> assets(dir)		   放置静态数据
c> components(dir)	   放置组件   / 在该目录下创建自己单页面组件的文件夹，
					一个文件夹代表一个单页面拆分的组件
d> mock(dir)		   放置假数据  / 自己页面需要的假数据模拟，json文件，可独立创建文件夹
e> pages(dir)		   放置单页面组件，与components文件夹下的文件夹对应
f> router(dir)		   路由跳转
g> URL(dir)		   路由URL
e> App.vue(file)	   页面入口文件
f> main.js(file)	   程序入口文件





-------------------  文件命名规范  -----------------------
1：文件夹/文件命名语义化
    为了推送少出bug，尽量都语义化自己创建的文件夹，文件命名用统一的格式
  比如，文件夹名用 store， 在此文件夹下的文件命名可以加上store前缀（仅供参考）






-------------------  代码规范  -----------------------
1： 添加注释（复杂代码）
    ① 类注释
    类的注释，需要描述类的功能、依赖和如何使用
    ②代码注释
    复杂的逻辑应当添加注释
    ③使用Region
    使用关键字region注释使代码更加整洁
    ④全局变量注释
    每个全局变量需要写注释
    ⑤程序流程变化注释
    switch, if, while 等条件判断地方必须写注释
    ⑥public方法注释
    public的方法体中的代码，需要写好详尽的注释

2： css使用选择器，避免使用标签直接写样式（禁止用标签写），以防样式冲突
    选择器命名 ：
		a> 下划线命名―query_by_name

3： 使用自描述的变量名和方法名(让命名变得有意义)

4： 生命周期：尽量缩短变量的存活周期，不是必须使用尽量不要使用全局变量

5： 一个方法中尽量只做一件事，并且命名可以知道这个方法做了什么【方法的命名配合类的命名可以尽可能的简洁】

6： 代码封装以重复使用（添加好注释）

7： 排版整齐



